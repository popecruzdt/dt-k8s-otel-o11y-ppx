{
    "version": "6",
    "defaultTimeframe": {
        "from": "now()-30m",
        "to": "now()"
    },
    "sections": [
        {
            "id": "5d88afa5-1de5-4890-b78a-cb858b662750",
            "type": "markdown",
            "markdown": "### OpenTelemetry Collector Logs\n\nThe OpenTelemetry Collector can be configured to output JSON structured logs as internal telemetry.  Dynatrace DQL can be used to filter, process, and analyze this log data to ensure reliability of the OpenTelemetry data pipeline.\n\nBy default, OpenTelemetry Collector logs are output mixed JSON/console format, making them difficult to use.\n\n#### Goals:\n* Parse JSON content\n* Set loglevel and status\n* Remove unwanted fields/attributes\n* Extract metrics: successful data points\n* Extract metrics: dropped data points\n* Alert: zero data points"
        },
        {
            "id": "32fe7e4f-1986-45e8-a688-ab7a6a0dee87",
            "type": "dql",
            "showTitle": false,
            "drilldownPath": [],
            "state": {
                "input": {
                    "value": "fetch logs\n| filter k8s.namespace.name == \"dynatrace\" and k8s.container.name == \"otc-container\" and telemetry.sdk.name == \"opentelemetry\"\n| sort timestamp desc\n| limit 100",
                    "timeframe": {
                        "from": "now()-30m",
                        "to": "now()"
                    }
                },
                "querySettings": {
                    "maxResultRecords": 1000,
                    "defaultScanLimitGbytes": 500,
                    "maxResultMegaBytes": 1,
                    "defaultSamplingRatio": 10,
                    "enableSampling": false
                },
                "visualizationSettings": {
                    "thresholds": [],
                    "chartSettings": {
                        "gapPolicy": "connect",
                        "circleChartSettings": {
                            "groupingThresholdType": "relative",
                            "groupingThresholdValue": 0,
                            "valueType": "relative"
                        },
                        "categoryOverrides": {}
                    },
                    "singleValue": {
                        "showLabel": true,
                        "label": "",
                        "prefixIcon": "",
                        "autoscale": true,
                        "alignment": "center",
                        "colorThresholdTarget": "value"
                    },
                    "table": {
                        "rowDensity": "condensed",
                        "enableSparklines": false,
                        "hiddenColumns": [],
                        "lineWrapIds": [],
                        "firstVisibleRowIndex": 0,
                        "columnWidths": {}
                    },
                    "honeycomb": {
                        "shape": "hexagon",
                        "legend": {
                            "hidden": false,
                            "position": "auto"
                        },
                        "colorMode": "color-palette",
                        "colorPalette": "categorical"
                    }
                }
            }
        },
        {
            "id": "aff29dbd-3e4f-46c8-9f4e-aabfa5edfc3e",
            "type": "markdown",
            "markdown": "#### Parse JSON Content\nhttps://docs.dynatrace.com/docs/platform/grail/dynatrace-query-language/commands/extraction-and-parsing-commands#parse\n\nParses a record field and puts the result(s) into one or more fields as specified in the pattern.  The parse command works in combination with the Dynatrace Pattern Language for parsing strings.\\\nhttps://docs.dynatrace.com/docs/platform/grail/dynatrace-pattern-language/log-processing-json-object\n\nThere are several ways how to control parsing elements from a JSON object. The easiest is to use the JSON matcher without any parameters. It will enumerate all elements, transform them into Log processing data type from their defined type in JSON and returns a variant_object with parsed elements.\n\nThe `content` field contains JSON structured details that can be parsed to better analyze relevant fields. The structured content can then be flattened for easier analysis.\\\nhttps://docs.dynatrace.com/docs/platform/grail/dynatrace-query-language/commands/structuring-commands#fieldsFlatten"
        },
        {
            "id": "c997c352-a8b2-4c02-b9d7-9db8e4f11833",
            "type": "dql",
            "showTitle": false,
            "drilldownPath": [],
            "state": {
                "input": {
                    "value": "fetch logs\n| filter k8s.namespace.name == \"dynatrace\" and k8s.container.name == \"otc-container\" and telemetry.sdk.name == \"opentelemetry\"\n| sort timestamp desc\n| limit 100\n| parse content, \"DATA JSON:jc\"\n| fieldsFlatten jc, prefix: \"content.\"\n| fields timestamp, content, jc, content.level, content.ts, content.msg, content.kind, content.data_type, content.name",
                    "timeframe": {
                        "from": "now()-30m",
                        "to": "now()"
                    }
                },
                "querySettings": {
                    "maxResultRecords": 1000,
                    "defaultScanLimitGbytes": 500,
                    "maxResultMegaBytes": 1,
                    "defaultSamplingRatio": 10,
                    "enableSampling": false
                },
                "visualizationSettings": {
                    "thresholds": [],
                    "chartSettings": {
                        "gapPolicy": "connect",
                        "circleChartSettings": {
                            "groupingThresholdType": "relative",
                            "groupingThresholdValue": 0,
                            "valueType": "relative"
                        },
                        "categoryOverrides": {}
                    },
                    "singleValue": {
                        "showLabel": true,
                        "label": "",
                        "prefixIcon": "",
                        "autoscale": true,
                        "alignment": "center",
                        "colorThresholdTarget": "value"
                    },
                    "table": {
                        "rowDensity": "condensed",
                        "enableSparklines": false,
                        "hiddenColumns": [],
                        "lineWrapIds": [],
                        "firstVisibleRowIndex": 0,
                        "columnWidths": {}
                    },
                    "honeycomb": {
                        "shape": "hexagon",
                        "legend": {
                            "hidden": false,
                            "position": "auto"
                        },
                        "colorMode": "color-palette",
                        "colorPalette": "categorical"
                    }
                }
            }
        },
        {
            "id": "702f4e88-9de3-46ff-bb59-8dccc4fc05bc",
            "type": "markdown",
            "markdown": "#### Set `loglevel` and `status` fields\nhttps://docs.dynatrace.com/docs/platform/grail/dynatrace-query-language/commands/selection-and-modification-commands\n\nThe `fieldsAdd` command evaluates an expression and appends or replaces a field.\n\nThe JSON structure contains a field `level` that can be used to set the `loglevel` field.  It must be uppercase.\n\n* loglevel possible values are: NONE, TRACE, DEBUG, NOTICE, INFO, WARN, SEVERE, ERROR, CRITICAL, ALERT, FATAL, EMERGENCY\n* status field possible values are: ERROR, WARN, INFO, NONE\n\nThe `if` conditional function allows you to set a value based on a conditional expression.  Since the `status` field depends on the `loglevel` field, a nested `if` expression can be used.\n\nhttps://docs.dynatrace.com/docs/platform/grail/dynatrace-query-language/functions/conditional-functions#if"
        },
        {
            "id": "50cf2a68-b421-4af4-85c8-da7cd653898d",
            "type": "dql",
            "showTitle": false,
            "drilldownPath": [],
            "state": {
                "input": {
                    "value": "fetch logs\n| filter k8s.namespace.name == \"dynatrace\" and k8s.container.name == \"otc-container\" and telemetry.sdk.name == \"opentelemetry\"\n| sort timestamp desc\n| limit 100\n| parse content, \"DATA JSON:jc\"\n| fieldsFlatten jc, prefix: \"content.\"\n| fieldsAdd loglevel = upper(content.level)\n| fieldsAdd status = if(loglevel==\"INFO\",\"INFO\",else: // most likely first\n                     if(loglevel==\"WARN\",\"WARN\",else: // second most likely second\n                     if(loglevel==\"ERROR\",\"ERROR\", else: // third most likely third\n                     if(loglevel==\"NONE\",\"NONE\",else: // fourth most likely fourth\n                     if(loglevel==\"TRACE\",\"INFO\",else:\n                     if(loglevel==\"DEBUG\",\"INFO\",else:\n                     if(loglevel==\"NOTICE\",\"INFO\",else:\n                     if(loglevel==\"SEVERE\",\"ERROR\",else:\n                     if(loglevel==\"CRITICAL\",\"ERROR\",else:\n                     if(loglevel==\"ALERT\",\"ERROR\",else:\n                     if(loglevel==\"FATAL\",\"ERROR\",else:\n                     if(loglevel==\"EMERGENCY\",\"ERROR\",else:\n                     \"NONE\"))))))))))))\n| fields timestamp, loglevel, status, content, content.level",
                    "timeframe": {
                        "from": "now()-30m",
                        "to": "now()"
                    }
                },
                "querySettings": {
                    "maxResultRecords": 1000,
                    "defaultScanLimitGbytes": 500,
                    "maxResultMegaBytes": 1,
                    "defaultSamplingRatio": 10,
                    "enableSampling": false
                },
                "visualizationSettings": {
                    "thresholds": [],
                    "chartSettings": {
                        "gapPolicy": "connect",
                        "circleChartSettings": {
                            "groupingThresholdType": "relative",
                            "groupingThresholdValue": 0,
                            "valueType": "relative"
                        },
                        "categoryOverrides": {}
                    },
                    "singleValue": {
                        "showLabel": true,
                        "label": "",
                        "prefixIcon": "",
                        "autoscale": true,
                        "alignment": "center",
                        "colorThresholdTarget": "value"
                    },
                    "table": {
                        "rowDensity": "condensed",
                        "enableSparklines": false,
                        "hiddenColumns": [],
                        "lineWrapIds": [],
                        "firstVisibleRowIndex": 0,
                        "columnWidths": {}
                    },
                    "honeycomb": {
                        "shape": "hexagon",
                        "legend": {
                            "hidden": false,
                            "position": "auto"
                        },
                        "colorMode": "color-palette",
                        "colorPalette": "categorical"
                    }
                }
            }
        },
        {
            "id": "06db6842-f2e1-4f6f-a697-d868d36694a8",
            "type": "markdown",
            "markdown": "#### Remove unwanted fields/attributes\n\nThe `fieldsRemove` command will remove selected fields.\\\nhttps://docs.dynatrace.com/docs/platform/grail/dynatrace-query-language/commands/selection-and-modification-commands#fieldsRemove\n\nAfter parsing and flattening the JSON structured content, the original fields should be removed.  Fields that don't add value should be removed at the source, but if they are not, they can be removed with DQL.\n\nEvery log record should ideally have a content field, as it is expected.  The `content` field can be updated with values from other fields, such as `content.msg` and `content.message`."
        },
        {
            "id": "58abbf66-1c11-4c87-9394-414b37af0c38",
            "type": "dql",
            "showTitle": false,
            "drilldownPath": [],
            "state": {
                "input": {
                    "value": "fetch logs\n| filter k8s.namespace.name == \"dynatrace\" and k8s.container.name == \"otc-container\" and telemetry.sdk.name == \"opentelemetry\"\n| sort timestamp desc\n| limit 100\n| parse content, \"DATA JSON:jc\"\n| fieldsFlatten jc, prefix: \"content.\"\n| fieldsRemove jc, content.level, content.ts, log.iostream\n| fieldsAdd content = if((isNotNull(content.msg) and isNotNull(content.message)), concat(content.msg,\" | \",content.message), else:\n                      if((isNotNull(content.msg) and isNull(content.message)), content.msg, else:\n                      if((isNull(content.msg) and isNotNull(content.message)), content.message, else:\n                      content)))\n| fields timestamp, content, content.msg, content.message",
                    "timeframe": {
                        "from": "now()-30m",
                        "to": "now()"
                    }
                },
                "querySettings": {
                    "maxResultRecords": 1000,
                    "defaultScanLimitGbytes": 500,
                    "maxResultMegaBytes": 1,
                    "defaultSamplingRatio": 10,
                    "enableSampling": false
                },
                "visualizationSettings": {
                    "thresholds": [],
                    "chartSettings": {
                        "gapPolicy": "connect",
                        "circleChartSettings": {
                            "groupingThresholdType": "relative",
                            "groupingThresholdValue": 0,
                            "valueType": "relative"
                        },
                        "categoryOverrides": {}
                    },
                    "singleValue": {
                        "showLabel": true,
                        "label": "",
                        "prefixIcon": "",
                        "autoscale": true,
                        "alignment": "center",
                        "colorThresholdTarget": "value"
                    },
                    "table": {
                        "rowDensity": "condensed",
                        "enableSparklines": false,
                        "hiddenColumns": [],
                        "lineWrapIds": [],
                        "firstVisibleRowIndex": 0,
                        "columnWidths": {}
                    },
                    "honeycomb": {
                        "shape": "hexagon",
                        "legend": {
                            "hidden": false,
                            "position": "auto"
                        },
                        "colorMode": "color-palette",
                        "colorPalette": "categorical"
                    }
                }
            }
        },
        {
            "id": "58332b2d-03bd-460b-9444-0d61d5660377",
            "type": "markdown",
            "markdown": "#### Extract metrics: successful data points / signals\n\nThe `summarize` command enables you to aggregate records to compute results based on counts, attribute values, and more.\\\nhttps://docs.dynatrace.com/docs/platform/grail/dynatrace-query-language/commands/aggregation-commands#summarize\n\nThe JSON structured content contains several fields that indicate the number of successful data points / signals sent by the exporter.\n* logs: resource logs, log records\n* metrics: resource metrics, metrics, data points\n* traces: resource spans, spans"
        },
        {
            "id": "15023e07-f00a-458b-9485-91c8eda609b0",
            "type": "dql",
            "showTitle": false,
            "drilldownPath": [],
            "state": {
                "input": {
                    "value": "fetch logs\n| filter k8s.namespace.name == \"dynatrace\" and k8s.container.name == \"otc-container\" and telemetry.sdk.name == \"opentelemetry\"\n| sort timestamp desc\n| limit 100\n| parse content, \"DATA JSON:jc\"\n| fieldsFlatten jc, prefix: \"content.\"\n| filter matchesValue(`content.kind`,\"exporter\")\n| fieldsRemove content, jc, content.level, content.ts, log.iostream\n| summarize {\n              resource_metrics = sum(`content.resource metrics`),\n              metrics = sum(`content.metrics`),\n              data_points = sum(`content.data points`),\n              resource_spans = sum(`content.resource spans`),\n              spans = sum(`content.spans`),\n              resource_logs = sum(`content.resource logs`),\n              log_records = sum(`content.log records`)\n              }, by: { data_type = `content.data_type`, exporter = `content.name`, dynatrace.otel.collector, k8s.cluster.name}",
                    "timeframe": {
                        "from": "now()-30m",
                        "to": "now()"
                    }
                },
                "querySettings": {
                    "maxResultRecords": 1000,
                    "defaultScanLimitGbytes": 500,
                    "maxResultMegaBytes": 1,
                    "defaultSamplingRatio": 10,
                    "enableSampling": false
                },
                "visualizationSettings": {
                    "thresholds": [],
                    "chartSettings": {
                        "gapPolicy": "connect",
                        "circleChartSettings": {
                            "groupingThresholdType": "relative",
                            "groupingThresholdValue": 0,
                            "valueType": "relative"
                        },
                        "categoryOverrides": {}
                    },
                    "singleValue": {
                        "showLabel": true,
                        "label": "",
                        "prefixIcon": "",
                        "autoscale": true,
                        "alignment": "center",
                        "colorThresholdTarget": "value"
                    },
                    "table": {
                        "rowDensity": "condensed",
                        "enableSparklines": false,
                        "hiddenColumns": [],
                        "lineWrapIds": [],
                        "firstVisibleRowIndex": 0,
                        "columnWidths": {}
                    },
                    "honeycomb": {
                        "shape": "hexagon",
                        "legend": {
                            "hidden": false,
                            "position": "auto"
                        },
                        "colorMode": "color-palette",
                        "colorPalette": "categorical"
                    }
                }
            }
        },
        {
            "id": "aeaecd55-152a-4c13-b16f-ca07e48ca8e0",
            "type": "markdown",
            "markdown": "#### Extract metrics: dropped data points / signals\n\nThe JSON structured content contains several fields that indicate the number of dropped data points / signals sent by the exporter.\n* dropped data points\n* data type\n* (exporter) name\n* message (reason)"
        },
        {
            "id": "c6e02908-35d1-4947-bdf3-f9e8d80bc911",
            "type": "dql",
            "showTitle": false,
            "drilldownPath": [],
            "state": {
                "input": {
                    "value": "fetch logs\n| filter k8s.namespace.name == \"dynatrace\" and k8s.container.name == \"otc-container\" and telemetry.sdk.name == \"opentelemetry\"\n| sort timestamp desc\n| limit 100\n| parse content, \"DATA JSON:jc\"\n| fieldsFlatten jc, prefix: \"content.\"\n| filter matchesValue(`content.kind`,\"exporter\")\n| fieldsRemove content, jc, content.level, content.ts, log.iostream\n| parse content.message, \"DATA 'Reason:' LD:content.reason\"\n| fieldsAdd content.reason = if(isNull(content.reason), \"NONE\", else: content.reason)\n| summarize dropped_data_points = sum(`content.dropped_data_points`), by: {data_type = `content.data_type`, reason = `content.reason`, dynatrace.otel.collector, content.name}",
                    "timeframe": {
                        "from": "now()-30m",
                        "to": "now()"
                    }
                },
                "querySettings": {
                    "maxResultRecords": 1000,
                    "defaultScanLimitGbytes": 500,
                    "maxResultMegaBytes": 1,
                    "defaultSamplingRatio": 10,
                    "enableSampling": false
                },
                "visualizationSettings": {
                    "thresholds": [],
                    "chartSettings": {
                        "gapPolicy": "connect",
                        "circleChartSettings": {
                            "groupingThresholdType": "relative",
                            "groupingThresholdValue": 0,
                            "valueType": "relative"
                        },
                        "categoryOverrides": {}
                    },
                    "singleValue": {
                        "showLabel": true,
                        "label": "",
                        "prefixIcon": "",
                        "autoscale": true,
                        "alignment": "center",
                        "colorThresholdTarget": "value"
                    },
                    "table": {
                        "rowDensity": "condensed",
                        "enableSparklines": false,
                        "hiddenColumns": [],
                        "lineWrapIds": [],
                        "firstVisibleRowIndex": 0,
                        "columnWidths": {}
                    },
                    "honeycomb": {
                        "shape": "hexagon",
                        "legend": {
                            "hidden": false,
                            "position": "auto"
                        },
                        "colorMode": "color-palette",
                        "colorPalette": "categorical"
                    }
                }
            }
        },
        {
            "id": "d164308b-c726-420c-b475-a12be2719222",
            "type": "markdown",
            "markdown": "#### Alert: zero data points / signals\n\nIt would be unexpected that the collector exporter doesn't send any data points or signals.  We could alert on this unexpected behavior.\n\nThe field `content.data_type` will indicate the type of data point or signal.  The fields `content.log records`, `content.data points`, and `content.spans` will indicate the number of signals sent.  If the value is `0`, that is unexpected."
        },
        {
            "id": "7b541a26-afe4-4038-84a2-aeaa02637dab",
            "type": "dql",
            "showTitle": false,
            "drilldownPath": [],
            "state": {
                "input": {
                    "value": "fetch logs\n| filter k8s.namespace.name == \"dynatrace\" and k8s.container.name == \"otc-container\" and telemetry.sdk.name == \"opentelemetry\"\n| sort timestamp desc\n| limit 100\n| parse content, \"DATA JSON:jc\"\n| fieldsFlatten jc, prefix: \"content.\"\n| filter matchesValue(content.kind,\"exporter\")\n| summarize {\n              logs = countIf(matchesValue(`content.data_type`,\"logs\") and matchesValue(toString(`content.log records`),\"0\")),\n              metrics = countIf(matchesValue(`content.data_type`,\"metrics\") and matchesValue(toString(`content.data points`),\"0\")),\n              traces = countIf(matchesValue(`content.data_type`,\"traces\") and matchesValue(toString(`content.spans`),\"0\"))\n            }",
                    "timeframe": {
                        "from": "now()-30m",
                        "to": "now()"
                    }
                },
                "querySettings": {
                    "maxResultRecords": 1000,
                    "defaultScanLimitGbytes": 500,
                    "maxResultMegaBytes": 1,
                    "defaultSamplingRatio": 10,
                    "enableSampling": false
                },
                "visualizationSettings": {
                    "thresholds": [],
                    "chartSettings": {
                        "gapPolicy": "connect",
                        "circleChartSettings": {
                            "groupingThresholdType": "relative",
                            "groupingThresholdValue": 0,
                            "valueType": "relative"
                        },
                        "categoryOverrides": {}
                    },
                    "singleValue": {
                        "showLabel": true,
                        "label": "",
                        "prefixIcon": "",
                        "autoscale": true,
                        "alignment": "center",
                        "colorThresholdTarget": "value"
                    },
                    "table": {
                        "rowDensity": "condensed",
                        "enableSparklines": false,
                        "hiddenColumns": [],
                        "lineWrapIds": [],
                        "firstVisibleRowIndex": 0,
                        "columnWidths": {}
                    },
                    "honeycomb": {
                        "shape": "hexagon",
                        "legend": {
                            "hidden": false,
                            "position": "auto"
                        },
                        "colorMode": "color-palette",
                        "colorPalette": "categorical"
                    }
                }
            }
        },
        {
            "id": "660a19a1-066a-495d-916f-938c07499613",
            "type": "markdown",
            "markdown": "### OpenPipeline"
        },
        {
            "id": "80493b2c-835d-46fa-9d64-e822ecc9266a",
            "type": "dql",
            "showTitle": false,
            "drilldownPath": [],
            "title": "One Log Record For Pipeline Testing",
            "state": {
                "input": {
                    "value": "fetch logs\n| filter k8s.namespace.name == \"dynatrace\" and k8s.container.name == \"otc-container\" and telemetry.sdk.name == \"opentelemetry\"\n| fieldsRemove cloud.account.id // removed for data privacy and security reasons only\n| sort timestamp desc\n| limit 1",
                    "timeframe": {
                        "from": "now()-30m",
                        "to": "now()"
                    }
                },
                "querySettings": {
                    "maxResultRecords": 1000,
                    "defaultScanLimitGbytes": 500,
                    "maxResultMegaBytes": 1,
                    "defaultSamplingRatio": 10,
                    "enableSampling": false
                },
                "visualizationSettings": {
                    "thresholds": [],
                    "chartSettings": {
                        "gapPolicy": "connect",
                        "circleChartSettings": {
                            "groupingThresholdType": "relative",
                            "groupingThresholdValue": 0,
                            "valueType": "relative"
                        },
                        "categoryOverrides": {}
                    },
                    "singleValue": {
                        "showLabel": true,
                        "label": "",
                        "prefixIcon": "",
                        "autoscale": true,
                        "alignment": "center",
                        "colorThresholdTarget": "value"
                    },
                    "table": {
                        "rowDensity": "condensed",
                        "enableSparklines": false,
                        "hiddenColumns": [],
                        "lineWrapIds": [],
                        "firstVisibleRowIndex": 0,
                        "columnWidths": {}
                    },
                    "honeycomb": {
                        "shape": "hexagon",
                        "legend": {
                            "hidden": false,
                            "position": "auto"
                        },
                        "colorMode": "color-palette",
                        "colorPalette": "categorical"
                    }
                }
            }
        },
        {
            "id": "086a641d-8ede-4d79-b717-eece1571d037",
            "type": "dql",
            "showTitle": false,
            "drilldownPath": [],
            "title": "OpenPipeline Processing Results",
            "state": {
                "input": {
                    "value": "fetch logs\n| filter k8s.namespace.name == \"dynatrace\" and k8s.container.name == \"otc-container\" and telemetry.sdk.name == \"opentelemetry\"\n| fieldsRemove cloud.account.id // removed for data privacy and security reasons only\n| sort timestamp desc\n| limit 50\n| fields timestamp, collector, k8s.cluster.name, loglevel, status, content.kind, content.name, content.msg, content.message, content.data_points, content.dropped_data_points",
                    "timeframe": {
                        "from": "now()-30m",
                        "to": "now()"
                    }
                },
                "querySettings": {
                    "maxResultRecords": 1000,
                    "defaultScanLimitGbytes": 500,
                    "maxResultMegaBytes": 1,
                    "defaultSamplingRatio": 10,
                    "enableSampling": false
                },
                "visualizationSettings": {
                    "thresholds": [],
                    "chartSettings": {
                        "gapPolicy": "connect",
                        "circleChartSettings": {
                            "groupingThresholdType": "relative",
                            "groupingThresholdValue": 0,
                            "valueType": "relative"
                        },
                        "categoryOverrides": {}
                    },
                    "singleValue": {
                        "showLabel": true,
                        "label": "",
                        "prefixIcon": "",
                        "autoscale": true,
                        "alignment": "center",
                        "colorThresholdTarget": "value"
                    },
                    "table": {
                        "rowDensity": "condensed",
                        "enableSparklines": false,
                        "hiddenColumns": [],
                        "lineWrapIds": [],
                        "firstVisibleRowIndex": 0,
                        "columnWidths": {}
                    },
                    "honeycomb": {
                        "shape": "hexagon",
                        "legend": {
                            "hidden": false,
                            "position": "auto"
                        },
                        "colorMode": "color-palette",
                        "colorPalette": "categorical"
                    }
                }
            }
        },
        {
            "id": "4c487285-10f6-4e59-96f5-681fba6c887f",
            "type": "dql",
            "showTitle": false,
            "drilldownPath": [],
            "title": "Extracted metrics: successful data points / signals",
            "state": {
                "input": {
                    "value": "timeseries {\n            metrics = sum(log.otelcol_exporter_sent_metric_data_points),\n            logs = sum(log.otelcol_exporter_sent_log_records),\n            traces = sum(log.otelcol_exporter_sent_trace_spans)\n            }, by: {k8s.cluster.name, collector, exporter = content.name}",
                    "timeframe": {
                        "from": "now()-30m",
                        "to": "now()"
                    }
                },
                "querySettings": {
                    "maxResultRecords": 1000,
                    "defaultScanLimitGbytes": 500,
                    "maxResultMegaBytes": 1,
                    "defaultSamplingRatio": 10,
                    "enableSampling": false
                },
                "visualizationSettings": {
                    "thresholds": [],
                    "chartSettings": {
                        "gapPolicy": "connect",
                        "circleChartSettings": {
                            "groupingThresholdType": "relative",
                            "groupingThresholdValue": 0,
                            "valueType": "relative"
                        },
                        "categoryOverrides": {}
                    },
                    "singleValue": {
                        "showLabel": true,
                        "label": "",
                        "prefixIcon": "",
                        "autoscale": true,
                        "alignment": "center",
                        "colorThresholdTarget": "value"
                    },
                    "table": {
                        "rowDensity": "condensed",
                        "enableSparklines": false,
                        "hiddenColumns": [],
                        "lineWrapIds": [],
                        "firstVisibleRowIndex": 0,
                        "columnWidths": {}
                    },
                    "honeycomb": {
                        "shape": "hexagon",
                        "legend": {
                            "hidden": false,
                            "position": "auto"
                        },
                        "colorMode": "color-palette",
                        "colorPalette": "categorical"
                    }
                }
            }
        },
        {
            "id": "205048dc-e60d-423d-8692-6603ba2b134f",
            "type": "dql",
            "showTitle": false,
            "drilldownPath": [],
            "title": "Extracted metrics: dropped data points / signals",
            "state": {
                "input": {
                    "value": "timeseries {\n            dropped_data_points = sum(log.otelcol_exporter_dropped_data_points_by_data_type)\n           }, by: {k8s.cluster.name, collector, exporter = content.name}",
                    "timeframe": {
                        "from": "now()-30m",
                        "to": "now()"
                    }
                },
                "querySettings": {
                    "maxResultRecords": 1000,
                    "defaultScanLimitGbytes": 500,
                    "maxResultMegaBytes": 1,
                    "defaultSamplingRatio": 10,
                    "enableSampling": false
                },
                "visualizationSettings": {
                    "thresholds": [],
                    "chartSettings": {
                        "gapPolicy": "connect",
                        "circleChartSettings": {
                            "groupingThresholdType": "relative",
                            "groupingThresholdValue": 0,
                            "valueType": "relative"
                        },
                        "categoryOverrides": {}
                    },
                    "singleValue": {
                        "showLabel": true,
                        "label": "",
                        "prefixIcon": "",
                        "autoscale": true,
                        "alignment": "center",
                        "colorThresholdTarget": "value"
                    },
                    "table": {
                        "rowDensity": "condensed",
                        "enableSparklines": false,
                        "hiddenColumns": [],
                        "lineWrapIds": [],
                        "firstVisibleRowIndex": 0,
                        "columnWidths": {}
                    },
                    "honeycomb": {
                        "shape": "hexagon",
                        "legend": {
                            "hidden": false,
                            "position": "auto"
                        },
                        "colorMode": "color-palette",
                        "colorPalette": "categorical"
                    }
                }
            }
        }
    ]
}